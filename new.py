import sqlite3
import os
import shutil
import tkinter as tk
from tkinter import ttk, filedialog

# ==============================
# Database Setup
# ==============================
class Database:
    def __init__(self, db_name="Data.sqlite3"):
        self.conn = sqlite3.connect(db_name)
        self.c = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        self.c.execute("""
        CREATE TABLE IF NOT EXISTS Student (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            Student_name TEXT,
            Student_id INTEGER UNIQUE,
            Email TEXT UNIQUE
        )
        """)
        self.c.execute("""
        CREATE TABLE IF NOT EXISTS Project (
            ID INTEGER PRIMARY KEY AUTOINCREMENT,
            Project_name TEXT UNIQUE,
            Description TEXT,
            Student_id INTEGER,
            Year REAL,
            Owner TEXT,
            FOREIGN KEY(Student_id) REFERENCES Student(Student_id)
        )
        """)
        self.conn.commit()


# ==============================
# Student Class
# ==============================
class Student:
    def __init__(self, db, student_name=None, student_id=None, student_email=None):
        self.db = db
        self.name = student_name
        self.student_id = student_id
        self.email = student_email

    def exists(self):
        self.db.c.execute("SELECT 1 FROM Student WHERE Student_id=?", (self.student_id,))
        return self.db.c.fetchone() is not None

    def email_exists(self):
        self.db.c.execute("SELECT 1 FROM Student WHERE Email=?", (self.email,))
        return self.db.c.fetchone() is not None

    def save(self):
        try:
            with self.db.conn:
                self.db.c.execute(
                    "INSERT INTO Student (Student_name, Student_id, Email) VALUES (?,?,?)",
                    (self.name, self.student_id, self.email)
                )
            print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ {self.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except sqlite3.IntegrityError as e:
            print("‚ùå Error:", e)


# ==============================
# Project Class
# ==============================
class Project:
    def __init__(self, db, project_name=None, description=None, year=None, student_id=None, owner=None):
        self.db = db
        self.name = project_name
        self.description = description
        self.year = year
        self.student_id = student_id
        self.owner = owner

    def exists(self):
        self.db.c.execute("SELECT 1 FROM Project WHERE Project_name=?", (self.name,))
        return self.db.c.fetchone() is not None

    def save(self):
        try:
            with self.db.conn:
                self.db.c.execute(
                    "INSERT INTO Project (Project_name, Description, Year, Student_id, Owner) VALUES (?,?,?,?,?)",
                    (self.name, self.description, self.year, self.student_id, self.owner)
                )
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ {self.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except sqlite3.IntegrityError as e:
            print("‚ùå Error:", e)

    def create_folder(self, parent="Project_list"):
        path = os.path.join(parent, self.name)
        os.makedirs(path, exist_ok=True)
        print(f"üìÇ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {path}")


# ==============================
# Project File Manager
# ==============================
class ProjectFileManager:
    def __init__(self, parent_folder="Project_list"):
        self.parent_folder = parent_folder

    def upload_file(self, project_name):
        file_path = filedialog.askopenfilename(title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
        if not file_path:
            return
        path = os.path.join(self.parent_folder, project_name)
        os.makedirs(path, exist_ok=True)
        shutil.copy(file_path, path)
        print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {file_path} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {path}")

    def list_files(self, project_name):
        path = os.path.join(self.parent_folder, project_name)
        if os.path.exists(path):
            files = os.listdir(path)
            print(f"üìÇ ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô {project_name}: {files}")
            return files
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ")
            return []

    def delete_file(self, project_name, filename):
        path = os.path.join(self.parent_folder, project_name, filename)
        if os.path.exists(path):
            os.remove(path)
            print(f"üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")

    def delete_project_folder(self, project_name):
        path = os.path.join(self.parent_folder, project_name)
        if os.path.exists(path):
            shutil.rmtree(path)
            print(f"üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {project_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")


# ==============================
# Main Program
# ==============================
def main():
    db = Database()
    file_manager = ProjectFileManager()

    while True:
        action = input(
            "\n--- ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å ---\n"
            "[1] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤\n"
            "[2] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà\n"
            "[3] ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå\n"
            "[4] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£\n"
            "[5] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å\n"
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π: "
        )

        if action == '1':
            name = input("‡∏ä‡∏∑‡πà‡∏≠: ")
            sid = input("‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ")
            email = input("‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ")

            s = Student(db, name, sid, email)
            if s.exists():
                print("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                continue
            if s.email_exists():
                print("‚ùå Email ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                continue
            s.save()

        elif action == '2':
            sid = input("‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ")
            db.c.execute("SELECT Student_name FROM Student WHERE Student_id=?", (sid,))
            result = db.c.fetchone()
            if not result:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤")
                continue
            owner = result[0]

            pname = input("‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ")
            desc = input("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ")
            year = input("‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: ")

            p = Project(db, pname, desc, year, sid, owner)
            if p.exists():
                print("‚ùå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
                continue
            p.save()
            p.create_folder()

        elif action == '3':
            pname = input("‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ")
            file_manager.upload_file(pname)

        elif action == '4':
            pname = input("‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£: ")
            file_manager.list_files(pname)

        elif action == '5':
            print("üëã ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
            break

        else:
            print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")


if __name__ == "__main__":
    main()
